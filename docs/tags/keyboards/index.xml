<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>keyboards on </title>
    <link>https://shilohc.github.io/blog/tags/keyboards/</link>
    <description>Recent content in keyboards on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://shilohc.github.io/blog/tags/keyboards/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Keyboard Layout, Part 2</title>
      <link>https://shilohc.github.io/blog/posts/keyboard_layout_2/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shilohc.github.io/blog/posts/keyboard_layout_2/</guid>
      <description>&lt;p&gt;Okay, so my earlier &lt;a href=&#34;https://shilohc.github.io/blog/posts/typewriter_keyboard/&#34;&gt;post&lt;/a&gt; about modifying your keyboard layout sold you, but you don&amp;rsquo;t want to buy a whole new keyboard just yet?  You want a software-side key remapping solution?  Well, sure, fair enough.&lt;/p&gt;
&lt;p&gt;In the long term, this will be more annoying than modifying the keyboard firmware &amp;ndash; as I mentioned before, if you modify the keyboard firmware then you get your layout everywhere you plug in the keyboard, but software-side solutions are specific to the computer you&amp;rsquo;re on.  However, software-side solutions are easier to get started with.  Also you probably don&amp;rsquo;t want to change the firmware on the keyboard embedded in your laptop (for example, if you want to remap capslock to escape, which is one of the earliest items in my new computer setup checklist).&lt;/p&gt;
&lt;p&gt;On Linux: Augh.  If you&amp;rsquo;re using X you can use xkb, for which there are shortcuts to do common modifications like e.g. swap capslock and escape; if you want to do anything more complex be prepared to spend a few hours on it.  I don&amp;rsquo;t use Wayland so I did a quick duckduckgo about it and my eyes went to hell.&lt;/p&gt;
&lt;p&gt;On Mac: In later versions of MacOS, System Settings -&amp;gt; Keyboards deigns to allow you to perform a shortlist of modifications (e.g. swap capslock and escape).  For anything more advanced you&amp;rsquo;ll want Karabiner, which I seriously can&amp;rsquo;t recommend enough.  Comes with two tools: Karabiner Elements (set your remappings) and Karabiner Element Viewer (shows you what input events your keyboard is sending, which is great for debugging keyboard firmware).&lt;/p&gt;
&lt;p&gt;On Windows: Use AutoHotKey.  I don&amp;rsquo;t know shit about AHK because the last* Windows computer I ever used was the desktop my dad helped me build when I was like 9 that dual-booted Windows XP and the educational edition of Ubuntu.  However, Hillel Wayne has a &lt;a href=&#34;https://www.hillelwayne.com/post/ahk/&#34;&gt;great post about it&lt;/a&gt; that you might want to refer to.&lt;/p&gt;
&lt;p&gt;*This is not quite true.  Briefly, at a past internship, I had to use a Windows 10 computer because I was using a motion-capture system and its software was Windows-only.  I hated it.  Cortana kept yelling at me??  Things were happening seemingly uncontrollably?  How does anyone put up with this?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Typewriter Keyboard</title>
      <link>https://shilohc.github.io/blog/posts/typewriter_keyboard/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shilohc.github.io/blog/posts/typewriter_keyboard/</guid>
      <description>&lt;p&gt;This is a mechanical keyboard build (DZ60 PCB, Kailh Box Navy switches) that uses as its keycaps real keys from old typewriters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/typewriter_kb.jpg&#34; alt=&#34;Picture of typewriter keyboard without case, with more typewriter keys clustered near it&#34;&gt;&lt;/p&gt;
&lt;p&gt;I used three different sets of vintage typewriter keys. The alpha keys and some of the modifiers are glass tombstone-style keys from a vintage Royal mechanical typewriter, but since that&amp;rsquo;s only 50 keys, I augmented it with plastic keys from two different sets (origin unknown).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fun fact: Old typewriters &amp;ndash; including the Royal that my keys are from &amp;ndash; often didn&amp;rsquo;t come with a &lt;code&gt;1&lt;/code&gt; key; instead, the digit &lt;code&gt;1&lt;/code&gt; was typed using a lowercase &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These keys came with part of the typewriter stem still attached to the back, which I had to trim to a reasonable length. I cut a few off with a dremel tool, but this was more time-consuming than I liked, so I used a sheet metal hand nibbler on the rest and gave myself a wicked hand cramp.&lt;/p&gt;
&lt;p&gt;Next I designed (in OnShape) and 3D-printed adapters for these keys that would fit on the Cherry MX switches.  These, I hot-glued to the typewriter keys. I ended up designing six or so types of adapters &amp;ndash; some of the metal keys had wider stems than the others, a few came without stems, and of course each set of plastic keys needed its own type of adapter.  If I re-did this project I might use a material other than hot-melt glue to attach the adapters to the plastic keys; a couple of the keycaps I used on my arrow keys have an alarming tendency to come loose.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t really think far enough ahead to design and lasercut a custom plate, so I decided to do a plateless build with PCB-mount switches. Problem: Kailh BOX Navy switches aren&amp;rsquo;t PCB-mount. (PCB-mount switches have, in addition to the two metal switch pins, two plastic pins that fit into holes on the PCB for added rigidity.) Therefore, I hot-glued them to the PCB. A lot of hot glue was involved in this build.  I then mounted the finished PCB in a 3D-printed case from Thingiverse (I believe &lt;a href=&#34;https://www.thingiverse.com/thing:962978&#34;&gt;this one&lt;/a&gt;, but I&amp;rsquo;ve long since misplaced the original link).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/typewriter_kb2.jpg&#34; alt=&#34;Picture of typewriter keyboard with case&#34;&gt;&lt;/p&gt;
&lt;p&gt;The final step was flashing the keyboard firmware. Thankfully, the DZ60 is one of the incredibly many keyboards supported by the open-source QMK keyboard firmware. I tweaked one of the standard layouts a bit, since I&amp;rsquo;m using a somewhat weird split-spacebar layout with arrow keys. I also customized the underglow LED lighting and started adding some interesting layers.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s still more to do with this project.  I primarily want to work on the firmware; &lt;a href=&#34;https://shilohc.github.io/blog/posts/keyboard_layout/&#34;&gt;programming my Preonic&lt;/a&gt; has given me a much better idea of what I want on my layers.  Also, my 3D-printed case is lovely and purple, but it is also unfortunately opaque, and blocks most of the underglow LEDs &amp;ndash; it would be nice to replace the back of the case with acrylic, so the light can actually get outside the case, instead of shining up through the unpopulated holes in the PCB.  But for now, the keyboard works just fine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Keyboard Layout</title>
      <link>https://shilohc.github.io/blog/posts/keyboard_layout/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://shilohc.github.io/blog/posts/keyboard_layout/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that I&amp;rsquo;m massively obsessed with mechanical keyboards.  For sheer customizability, they&amp;rsquo;re impossible to beat.  Yes, I can put a lot of effort into software key remappings and then carefully port them over to every new computer I use &amp;ndash; or I can just use open-source keyboard firmware &lt;a href=&#34;https://docs.qmk.fm/#/&#34;&gt;QMK&lt;/a&gt; and my keyboard will work wherever I plug it in.  QMK also lets me program keys to do one thing when tapped and another thing when held down, or configure &amp;ldquo;layers&amp;rdquo; so that my letter keys will turn into symbol keys, so it&amp;rsquo;s more powerful than software configuration.&lt;/p&gt;
&lt;p&gt;How can I exercise this power for myself, I hear you ask?  First, get a keyboard that supports QMK.  I personally use a Preonic, which is not for everyone, but I recommend that you get a keyboard that has a split spacebar or otherwise has some extra thumb keys &amp;ndash; these are very convenient to assign as &amp;ldquo;layer activation&amp;rdquo; keys.  Then, follow the &lt;a href=&#34;https://docs.qmk.fm/#/newbs&#34;&gt;QMK docs&lt;/a&gt; on making a new keymap file and flashing your keyboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/preonic1.jpg&#34; alt=&#34;The Preonic, with its original keycaps&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll notice that the Preonic has a &amp;ldquo;lower&amp;rdquo; key to the left of the spacebar and a &amp;ldquo;raise&amp;rdquo; key to the right.  These let you easily access &amp;ldquo;raise&amp;rdquo; and &amp;ldquo;lower&amp;rdquo; layers by holding down the respective key &amp;ndash; instantly and enormously expanding your keyboard.  It also has actual, physical arrow keys, something that&amp;rsquo;s important to me, and yet it takes up less space than a normal 60% keyboard.&lt;/p&gt;
&lt;p&gt;The rest of this post will be about my personal layout choices.  You may want to follow along by looking at my personal config, which is &lt;a href=&#34;https://github.com/shilohc/qmk_firmware/tree/shilohc/keymaps/keyboards/preonic/keymaps/shilohc&#34;&gt;here&lt;/a&gt;.  You can find all my personal QMK configs in my fork of QMK &lt;a href=&#34;https://github.com/shilohc/qmk_firmware/tree/shilohc/keymaps&#34;&gt;here&lt;/a&gt;.  I also have a custom config for a DZ60, which is the PCB I used for my &lt;a href=&#34;https://shilohc.github.io/blog/posts/typewriter_keyboard/&#34;&gt;typewriter keyboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/preonic2.jpg&#34; alt=&#34;The Preonic, with Tengwar DSA keycaps&#34;&gt;&lt;/p&gt;
&lt;p&gt;First, the default layer, labeled &lt;code&gt;_QWERTY&lt;/code&gt; in &lt;code&gt;keymap.c&lt;/code&gt;.  I haven&amp;rsquo;t made too many changes here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete key changed to backslash because I write a lot of LaTeX and don&amp;rsquo;t use delete.&lt;/li&gt;
&lt;li&gt;Capslock changed to escape, something I highly recommend to all vim users.  If you use emacs I would instead suggest remapping it to ctrl.&lt;/li&gt;
&lt;li&gt;The Enter key has been changed to &lt;code&gt;SFT_T(KC_ENT)&lt;/code&gt;.  If it&amp;rsquo;s held down, and another key is pressed, it functions as a shift; if tapped, it acts as enter.  This is because when I first switched to the Preonic I exclusively used the right shift key, which the Preonic doesn&amp;rsquo;t have.  I now use the left shift more often on my preonic, but on my Macbook&amp;rsquo;s rubber keyboard cover, there&amp;rsquo;s still a massive wear spot in the right shift while the left shift is near-pristine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;_LOWER&lt;/code&gt; layer is the one I&amp;rsquo;ve customized the most &amp;ndash; this is now my &amp;ldquo;symbols and function keys&amp;rdquo; layer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The symbols that usually live on the number keys, &lt;code&gt;!@#$%^&amp;amp;*()&lt;/code&gt;, have been moved to the top row of letters, and the other common programming symbols live on the home row.&lt;/li&gt;
&lt;li&gt;All three sets of brackets (parentheses, square-brackets, and curlyboys) are in a vertical stack on the rightmost columns of letter keys.&lt;/li&gt;
&lt;li&gt;Backslash stays the same, but pipe (&lt;code&gt;|&lt;/code&gt;) has been moved to the quote key.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll notice that the little diagram in the comments says Squid on it.  I was experimenting with QMK&amp;rsquo;s Unicode-sending functionality, something the USB HID device standard typically doesn&amp;rsquo;t allow, by using this key to send the squid kaomoji, &lt;code&gt;くコ:彡&lt;/code&gt;.  Unfortunately, it didn&amp;rsquo;t work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;_RAISE&lt;/code&gt; layer is for special commands, since I moved all the symbol functionality into &lt;code&gt;_LOWER&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H, J, K, L can be used to drive the mouse around, and the semicolon key sends a click.  U and I scroll down and up.  This is probably the functionality on this layer I use most often.&lt;/li&gt;
&lt;li&gt;I experimented with using several other keys on this layer to control brightness, music, etc., but honestly I mostly don&amp;rsquo;t use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, there&amp;rsquo;s the &lt;code&gt;_ADJUST&lt;/code&gt; layer, which I never use (except once, when I was randomly button-mashing and accidentally switched into Colemak).  The less said about this, the better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/preonic3.jpg&#34; alt=&#34;The Preonic, with Godspeed MT3 keycaps&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the default keymap, both raise and lower have all the function keys on them, which is wasteful.  In addition, raise has a few symbols on it, in the same place where the lower layer also has symbols, which was really confusing for me to learn &amp;ndash; I could never remember whether the symbol I wanted was on raise or lower.  And some of the symbols were just hard to reach, especially &lt;code&gt;~&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; which I type a lot in bash commands.  With all the symbols on the raise layer, the functionality is (mostly) neatly divided into &amp;ldquo;symbols layer&amp;rdquo; and &amp;ldquo;not symbols layer&amp;rdquo;, which is easier to remember.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve chosen to stick to the QWERTY layout rather than switch to Dvorak or Colemak or Workman or something, mostly because I use vim and don&amp;rsquo;t want to disrupt that muscle memory.  (One afternoon I decided to try out Dvorak &amp;ndash; my typing speed after a few hours of practice wasn&amp;rsquo;t terrible, but then I tried to edit something in vim and I went directly to hell.  It was like, things are happening!  Why have I just jumped to the start of the file and deleted a bunch of lines?  That&amp;rsquo;s not what I wanted!)  I find that even with QWERTY, my Preonic represents a significant ergonomic improvement over a standard keyboard, since it&amp;rsquo;s ortholinear and very compact, reducing the distance my fingers have to stretch &amp;ndash; and my custom layout improves things more by putting all the symbols under the top two rows of letters.  Your mileage, of course, may vary.  A keyboard layout is a very personal thing, and I encourage you to experiment and customize yours until it perfectly fits you and your needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://shilohc.github.io/blog/img/keyboard_layout_meme.png&#34; alt=&#34;a keyboard layout is something that can actually be so personal&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

